I"5<p>When you find yourself writing the same code over and over again, it feels like Sass mixins might help you out.</p>

<p>Sass mixins are <strong>CSS functions</strong> that you can <strong>include</strong> whenever you want.</p>

<h3 id="syntax">Syntax</h3>

<p>Remember how we wrote <code class="highlighter-rouge">@keyframes</code> when creating <strong><a href="/css-animations.html">CSS animations</a></strong>? The Sass mixin syntax is fairly similar:</p>

<figure class="highlight"><pre><code class="language-scss" data-lang="scss"><span class="k">@mixin</span> <span class="nf">overlay</span><span class="p">()</span> <span class="p">{</span>
  <span class="nl">bottom</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
  <span class="nl">left</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
  <span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
  <span class="nl">right</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
  <span class="nl">top</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>The <strong>name</strong> of this mixin is <code class="highlighter-rouge">overlay</code>. You can reference this mixin in any CSS rule by using <code class="highlighter-rouge">@include</code>:</p>

<figure class="highlight"><pre><code class="language-scss" data-lang="scss"><span class="nc">.modal-background</span><span class="p">{</span>
  <span class="k">@include</span> <span class="nd">overlay</span><span class="p">();</span>
  <span class="nl">background</span><span class="p">:</span> <span class="no">black</span><span class="p">;</span>
  <span class="nl">opacity</span><span class="p">:</span> <span class="m">0</span><span class="mi">.9</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>As usual, this <code class="highlighter-rouge">.scss</code> will be compiled into <code class="highlighter-rouge">.css</code>:</p>

<figure class="highlight"><pre><code class="language-css" data-lang="css"><span class="nc">.modal-background</span><span class="p">{</span>
  <span class="nl">bottom</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
  <span class="nl">left</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
  <span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
  <span class="nl">right</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
  <span class="nl">top</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
  <span class="nl">background</span><span class="p">:</span> <span class="no">black</span><span class="p">;</span>
  <span class="nl">opacity</span><span class="p">:</span> <span class="m">0.9</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<h3 id="reusability">Reusability</h3>

<p>The main purpose of a mixin is to make a <strong>set of properties reusable</strong>.</p>

<p>Like Sass variables (where you define your <strong>values</strong> on a single location), Sass mixins allow you to define <strong>properties</strong> on a single location.</p>

<p>The previous mixin can be reused in other rules:</p>

<figure class="highlight"><pre><code class="language-scss" data-lang="scss"><span class="nc">.modal-background</span><span class="p">{</span>
  <span class="k">@include</span> <span class="nd">overlay</span><span class="p">();</span>
<span class="p">}</span>

<span class="nc">.product-link</span><span class="p">{</span>
  <span class="k">@include</span> <span class="nd">overlay</span><span class="p">();</span>
<span class="p">}</span>

<span class="nc">.image-pattern</span><span class="p">{</span>
  <span class="k">@include</span> <span class="nd">overlay</span><span class="p">();</span>
<span class="p">}</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-css" data-lang="css"><span class="nc">.modal-background</span><span class="p">{</span>
  <span class="nl">bottom</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
  <span class="nl">left</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
  <span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
  <span class="nl">right</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
  <span class="nl">top</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.product-link</span><span class="p">{</span>
  <span class="nl">bottom</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
  <span class="nl">left</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
  <span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
  <span class="nl">right</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
  <span class="nl">top</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.image-pattern</span><span class="p">{</span>
  <span class="nl">bottom</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
  <span class="nl">left</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
  <span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
  <span class="nl">right</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
  <span class="nl">top</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<h3 id="parameters">Parameters</h3>

<p>Because mixins are <strong>functions</strong> and because you might want to <strong>alter</strong> the <em>output</em>, mixins can accept <strong>parameters</strong>.</p>

<p>For example, this <a href="https://sass-lang.com/guide#topic-6-SCSS">border-radius mixin</a> prevents rewriting <strong>vendor prefixes</strong> and takes the actual <em>radius</em> value as a parameter:</p>

<figure class="highlight"><pre><code class="language-scss" data-lang="scss"><span class="k">@mixin</span> <span class="nf">border-radius</span><span class="p">(</span><span class="nv">$radius</span><span class="p">)</span> <span class="p">{</span>
  <span class="na">-webkit-border-radius</span><span class="p">:</span> <span class="nv">$radius</span><span class="p">;</span>
     <span class="na">-moz-border-radius</span><span class="p">:</span> <span class="nv">$radius</span><span class="p">;</span>
      <span class="na">-ms-border-radius</span><span class="p">:</span> <span class="nv">$radius</span><span class="p">;</span>
          <span class="nl">border-radius</span><span class="p">:</span> <span class="nv">$radius</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.box</span><span class="p">{</span>
  <span class="k">@include</span> <span class="nd">border-radius</span><span class="p">(</span><span class="m">3px</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-css" data-lang="css"><span class="nc">.box</span><span class="p">{</span>
  <span class="nl">-webkit-border-radius</span><span class="p">:</span> <span class="m">3px</span><span class="p">;</span>
     <span class="nl">-moz-border-radius</span><span class="p">:</span> <span class="m">3px</span><span class="p">;</span>
      <span class="nl">-ms-border-radius</span><span class="p">:</span> <span class="m">3px</span><span class="p">;</span>
          <span class="nl">border-radius</span><span class="p">:</span> <span class="m">3px</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>The mixin circumvents the hassle of having to write all vendor prefixes, and uses the <code class="highlighter-rouge">$radius</code> to allow defining the same radius value for every vendor property.</p>

<h3 id="optional-parameters">Optional parameters</h3>

<p>If you want a parameter to have a <strong>default</strong> value while providing the possibility to <em>set</em> one occasionally, you can create <strong>optional paramaters</strong>:</p>

<figure class="highlight"><pre><code class="language-scss" data-lang="scss"><span class="k">@mixin</span> <span class="nf">label</span><span class="p">(</span><span class="nv">$text</span><span class="o">:</span> <span class="s2">"Code"</span><span class="o">,</span> <span class="nv">$background</span><span class="o">:</span> <span class="nv">$yellow</span><span class="o">,</span> <span class="nv">$color</span><span class="o">:</span> <span class="nf">rgba</span><span class="p">(</span><span class="no">black</span><span class="o">,</span> <span class="m">0</span><span class="mi">.5</span><span class="p">))</span> <span class="p">{</span>
  <span class="nl">position</span><span class="p">:</span> <span class="nb">relative</span><span class="p">;</span>
  <span class="k">&amp;</span><span class="nd">:before</span><span class="p">{</span>
    <span class="nl">background</span><span class="p">:</span> <span class="nv">$background</span><span class="p">;</span>
    <span class="nl">color</span><span class="p">:</span> <span class="nv">$color</span><span class="p">;</span>
    <span class="nl">content</span><span class="p">:</span> <span class="nv">$text</span><span class="p">;</span>
    <span class="nl">display</span><span class="p">:</span> <span class="n">inline-block</span><span class="p">;</span>
    <span class="nl">font-size</span><span class="p">:</span> <span class="m">0</span><span class="mi">.6rem</span><span class="p">;</span>
    <span class="nl">font-weight</span><span class="p">:</span> <span class="m">700</span><span class="p">;</span>
    <span class="nl">height</span><span class="p">:</span> <span class="m">1rem</span><span class="p">;</span>
    <span class="nl">left</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
    <span class="nl">letter-spacing</span><span class="p">:</span> <span class="m">0</span><span class="mi">.1em</span><span class="p">;</span>
    <span class="nl">line-height</span><span class="p">:</span> <span class="m">1rem</span><span class="p">;</span>
    <span class="nl">padding</span><span class="p">:</span> <span class="m">0</span> <span class="m">0</span><span class="mi">.5em</span><span class="p">;</span>
    <span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
    <span class="nl">text-transform</span><span class="p">:</span> <span class="nb">uppercase</span><span class="p">;</span>
    <span class="nl">top</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>This mixin is the one used by this website to add <strong>labels</strong> in the top left corner of code snippets. It has 3 optional parameters, each of them with their own default value set with a colon <code class="highlighter-rouge">:</code>.</p>

<p>This mixin is used several times throughout the code:</p>

<figure class="highlight"><pre><code class="language-scss" data-lang="scss"><span class="nt">div</span><span class="nc">.highlighter-rouge</span><span class="p">{</span>
  <span class="k">@include</span> <span class="nd">label</span><span class="p">();</span>
  <span class="k">&amp;</span><span class="nc">.css</span><span class="p">{</span>
    <span class="k">@include</span> <span class="nd">label</span><span class="p">(</span><span class="s2">"CSS"</span><span class="o">,</span> <span class="nv">$blue</span><span class="o">,</span> <span class="no">white</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">&amp;</span><span class="nc">.scss</span><span class="p">{</span>
    <span class="k">@include</span> <span class="nd">label</span><span class="p">(</span><span class="s2">"SCSS"</span><span class="o">,</span> <span class="mh">#c69</span><span class="o">,</span> <span class="no">white</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>The <code class="highlighter-rouge">div.highlighter-rouge</code> will use the mixin’s default values:</p>

<ul>
  <li>text <code class="highlighter-rouge">"Code"</code></li>
  <li>background: <code class="highlighter-rouge">$yellow</code></li>
  <li>color: <code class="highlighter-rouge">rgba(black, 0.5)</code></li>
</ul>

<p>The <code class="highlighter-rouge">.css</code> and <code class="highlighter-rouge">.scss</code> versions, because their parameters are <em>set</em>, will use different labels and colors.</p>

<h3 id="mixin-libraries">Mixin libraries</h3>

<p>If you don’t want to spend time writing your own Sass mixins, you can use any of the following <strong>mixin libraries</strong>:</p>

<ul>
  <li><strong>Bourbon</strong>: <a href="https://bourbon.io/">bourbon.io</a></li>
  <li><strong>Compass</strong>: <a href="https://compass-style.org/">compass-style.org</a></li>
  <li><strong>Susy</strong>: <a href="https://susy.oddbird.net/">susy.oddbird.net</a></li>
</ul>
:ET