I"<p>The dimensions (or height and width) of an element are <strong>dynamic</strong>, as they fluctuate in order to fit the content. It is somehow possible to set <strong>specific</strong> dimensions.</p>

<figure class="highlight"><pre><code class="language-css" data-lang="css"><span class="nt">blockquote</span><span class="p">{</span> <span class="nl">width</span><span class="p">:</span> <span class="m">600px</span><span class="p">;}</span></code></pre></figure>

<p>The blockquote will not take up the whole width available, but will remain 600px wide <strong>in any situation</strong>:</p>

<ul>
  <li>if the browser window is less wide than 600px, it will show a horizontal scrolling bar</li>
  <li>if the browser window is wider than 600px, the blockquote will stay 600px wide and not take up the whole space</li>
</ul>

<p>Because we’ve only set the width, the blockquote remains fluid in <strong>height</strong>: the height becomes the variable dimension to fit the blockquote’s content.</p>

<h3 id="setting-both-height-and-width">Setting both height and width</h3>

<p>By setting the dimensions of an element, it will remain fixed no matter the length of its content.</p>

<p class="question">What happens if the content is longer than the element can contain?</p>

<p>Because we prevent the element to dynamically alter its dimensions, there is a chance the content will be longer than the element accomodates for and will subsequently <strong>overflow</strong>.</p>

<p>The default behavior can be surprising: the content will be displayed anyway!</p>

<figure class="highlight"><pre><code class="language-css" data-lang="css"><span class="nt">blockquote</span><span class="p">{</span> <span class="nl">background</span><span class="p">:</span> <span class="no">yellow</span><span class="p">;</span> <span class="nl">height</span><span class="p">:</span> <span class="m">50px</span><span class="p">;</span> <span class="nl">width</span><span class="p">:</span> <span class="m">100px</span><span class="p">;}</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;blockquote&gt;</span>The content er... finds a way<span class="nt">&lt;/blockquote&gt;</span></code></pre></figure>

<div class="result">
  <blockquote style="background: yellow; height: 50px; width: 100px;">The content er... finds a way</blockquote>
</div>

<h3 id="css-overflow">CSS overflow</h3>

<p>The <code class="highlighter-rouge">overflow</code> CSS property allows us to manage the case of content being longer than its container.</p>

<p>The default value is <code class="highlighter-rouge">visible</code>: the content will be displayed anyway, because <em>“Why would you want to prevent content from being read by the user if it’s present in the code?”</em>. You can consider <strong>HTML as prevalent to CSS</strong>.</p>

<p>By applying <code class="highlighter-rouge">overflow: hidden;</code>, you simply <em>forbid</em> any overflowing content to be seen.</p>

<div class="result">
  <blockquote style="background: yellow; height: 50px; overflow: hidden; width: 100px;">The content er... finds a way</blockquote>
</div>

<p>If you want your content to overflow but still want to make it accessible, you can decide to display scrollbars by applying <code class="highlighter-rouge">overflow: scroll</code>.</p>

<div class="result">
  <blockquote style="background: yellow; height: 50px; overflow: scroll; width: 100px;">The content er... finds a way</blockquote>
</div>

<p>A better option is use <code class="highlighter-rouge">overflow: auto</code>, as the scrollbars will only appear <em>if</em> the content is overflowing, but will remain hidden until then.</p>

<div class="result">
  <blockquote style="background: yellow; height: 50px; overflow: auto; width: 100px;">The content er... finds a way</blockquote>
</div>

<h3 id="beware-of-fixed-dimensions">Beware of fixed dimensions</h3>

<p>Applying specific dimensions are often required for a design to look visually appealing but can have unintended consequences. In that regard:</p>

<ul>
  <li>make sure your content doesn’t overflow</li>
  <li>if it does, use <code class="highlighter-rouge">overflow: hidden</code> or <code class="highlighter-rouge">overflow: auto</code> to prevent your design from breaking</li>
</ul>
:ET