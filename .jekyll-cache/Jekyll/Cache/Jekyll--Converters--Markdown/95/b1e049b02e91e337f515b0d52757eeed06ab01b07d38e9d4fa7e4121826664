I"P<p>We’ve seen so far how CSS allows us to apply colors, set fonts, tweak the text settings, position elements, space them, decorate them, move them around.</p>

<p>CSS <strong>transforms</strong> are a collection of <em>functions</em> that allow to <strong>shape elements</strong> in particular ways:</p>

<ul>
  <li><strong>translate</strong>: moves the element along up to 3 axis (x,y and z)</li>
  <li><strong>rotate</strong>: moves the element around a central point</li>
  <li><strong>scale</strong>: resizes the element</li>
  <li><strong>skew</strong>: distorts the element</li>
</ul>

<h3 id="transform-properties">transform properties</h3>

<p>There are 3 CSS transform properties available:</p>

<ul>
  <li><code class="highlighter-rouge">transform</code> defines which transform <em>function</em> to use (translate, rotate, scale…)</li>
  <li><code class="highlighter-rouge">transform-origin</code> allows to modify the origin point of a transformation (works like <a href="/css-background.html#background-position">background positions</a>)</li>
  <li><code class="highlighter-rouge">transform-style</code> is for 3d settings</li>
</ul>

<p>Note that unlike <code class="highlighter-rouge">background</code> and <code class="highlighter-rouge">border</code>, <code class="highlighter-rouge">transform</code> is <strong>not a shorthand property</strong>.</p>

<p>We’ll only use <code class="highlighter-rouge">transform</code> here.</p>

<h4 id="doesnt-break-the-flow">Doesn’t break the Flow</h4>

<p>To prevent unexpected behavior, transformed elements <strong>do not affect the Flow</strong>. Whether rotated, scaled or translated, they won’t affect other elements.</p>

<h3 id="translate">translate</h3>

<p>The <code class="highlighter-rouge">translate()</code> function allows to move an element <strong>across the plane</strong> (on the x and y axis). It accepts either:</p>

<ul>
  <li><strong>1 parameter</strong>: moves the element along the <code class="highlighter-rouge">x</code> axis</li>
  <li><strong>2 parameters</strong>: first value is for the <code class="highlighter-rouge">x</code> axis, second for the <code class="highlighter-rouge">y</code> one</li>
</ul>

<p>It’s like using <a href="/css-position.html#relative">relative positioning</a> with <code class="highlighter-rouge">left</code> and <code class="highlighter-rouge">top</code> values.</p>

<p>Let’s redo our <a href="/css-animations.html#result-2">circuit animation</a> using translation instead of left/top positioning:</p>

<figure class="highlight"><pre><code class="language-css" data-lang="css"><span class="k">@keyframes</span> <span class="n">translating</span> <span class="p">{</span>
  <span class="nt">0</span><span class="o">%</span>  <span class="p">{</span> <span class="nl">transform</span><span class="p">:</span> <span class="n">translate</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">);}</span>
  <span class="nt">25</span><span class="o">%</span> <span class="p">{</span> <span class="nl">transform</span><span class="p">:</span> <span class="n">translate</span><span class="p">(</span><span class="m">240px</span><span class="p">,</span> <span class="m">0</span><span class="p">);}</span>
  <span class="nt">50</span><span class="o">%</span> <span class="p">{</span> <span class="nl">transform</span><span class="p">:</span> <span class="n">translate</span><span class="p">(</span><span class="m">240px</span><span class="p">,</span> <span class="m">140px</span><span class="p">);}</span>
  <span class="nt">75</span><span class="o">%</span> <span class="p">{</span> <span class="nl">transform</span><span class="p">:</span> <span class="n">translate</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">140px</span><span class="p">);}</span>
  <span class="nt">100</span><span class="o">%</span><span class="p">{</span> <span class="nl">transform</span><span class="p">:</span> <span class="n">translate</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">);}</span>
<span class="p">}</span>
<span class="nt">p</span><span class="p">{</span> <span class="nl">animation</span><span class="p">:</span> <span class="n">translating</span> <span class="m">4s</span> <span class="n">linear</span> <span class="n">infinite</span><span class="p">;}</span></code></pre></figure>

<div class="result" id="translate-animation">
  <p>Hello</p>
</div>

<style type="text/css">
#translate-animation{ height: 200px; padding: 0; width: 300px;}
#translate-animation p{ animation: translating 4s linear 0s infinite; background: turquoise; color: white; height: 60px; line-height: 60px; margin: 0; position: absolute; text-align: center; width: 60px;}

@keyframes translating {
  0%  { transform: translate(0, 0);}
  25% { transform: translate(240px, 0);}
  50% { transform: translate(240px, 140px);}
  75% { transform: translate(0, 140px);}
  100%{ transform: translate(0, 0);}
}
</style>

<p class="focus">Remember: <code class="highlighter-rouge">transform</code> is the CSS <strong>property</strong>, <code class="highlighter-rouge">translate()</code> is the CSS <strong>value</strong> <em>attached to</em> that property (and also happens to be a function).</p>

<p>You can use <code class="highlighter-rouge">translateX()</code> and <code class="highlighter-rouge">translateY()</code> to only move your element along the <strong>x</strong> and <strong>y</strong> axis respectively.</p>

<h3 id="rotate">rotate</h3>

<p>The <code class="highlighter-rouge">rotate()</code> function allows to make an element <strong>revolve around a fixed point</strong>. By default, it revolves around the element’s center. Think of it as vinyl being played on a turntable.</p>

<p><code class="highlighter-rouge">rotate()</code> accepts only <strong>1</strong> parameter, which is an <strong>angle</strong> value defined in degrees <code class="highlighter-rouge">deg</code>, gradians <code class="highlighter-rouge">grad</code>, radians <code class="highlighter-rouge">rad</code> or turns <code class="highlighter-rouge">turn</code> (with 1 turn being equivalent to a full circle).</p>

<figure class="highlight"><pre><code class="language-css" data-lang="css"><span class="k">@keyframes</span> <span class="n">rotating</span> <span class="p">{</span>
  <span class="nt">0</span><span class="o">%</span>  <span class="p">{</span> <span class="nl">transform</span><span class="p">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">0deg</span><span class="p">);}</span>
  <span class="nt">100</span><span class="o">%</span><span class="p">{</span> <span class="nl">transform</span><span class="p">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">360deg</span><span class="p">);}</span>
<span class="p">}</span>
<span class="nt">p</span><span class="p">{</span> <span class="nl">animation</span><span class="p">:</span> <span class="n">rotating</span> <span class="m">4s</span> <span class="n">linear</span> <span class="n">infinite</span><span class="p">;}</span></code></pre></figure>

<div class="result" id="rotate-animation">
  <p>Vinyl</p>
</div>

<style type="text/css">
#rotate-animation{ padding: 2rem;}
#rotate-animation p{ animation: rotating 4s linear 0s infinite; background: slateblue; border-radius: 60px; color: white; height: 120px; line-height: 120px; margin: 0; text-align: center; width: 120px;}

@keyframes rotating {
  0%  { transform: rotate(0deg);}
  100%{ transform: rotate(360deg);}
}
</style>

<h3 id="scale">scale</h3>

<p>The <code class="highlighter-rouge">scale()</code> function allows to <strong>resize an element</strong>. It can either expand or shrink it. The function accepts either:</p>

<ul>
  <li><strong>1 parameter</strong>: the element is resized uniformily in height and width</li>
  <li><strong>2 parameters</strong>: the first value resizes the element <em>horizontally</em>, the second one <em>vertically</em></li>
</ul>

<p>The <strong>range</strong> of possible value is:</p>

<ul>
  <li><code class="highlighter-rouge">1</code>: the element retains its original size</li>
  <li><code class="highlighter-rouge">2</code>: the element doubles in size</li>
  <li><code class="highlighter-rouge">0.5</code>: the element is half of its size</li>
  <li><code class="highlighter-rouge">0</code>: the element basically disappears (as its height and width are equal to zero)</li>
  <li><code class="highlighter-rouge">-1</code>: the element is mirrored</li>
</ul>

<figure class="highlight"><pre><code class="language-css" data-lang="css"><span class="k">@keyframes</span> <span class="n">scaling</span> <span class="p">{</span>
  <span class="nt">0</span><span class="o">%</span>  <span class="p">{</span> <span class="nl">transform</span><span class="p">:</span> <span class="n">scale</span><span class="p">(</span><span class="m">1</span><span class="p">);}</span>
  <span class="nt">20</span><span class="o">%</span><span class="p">{</span> <span class="nl">transform</span><span class="p">:</span> <span class="n">scale</span><span class="p">(</span><span class="m">2</span><span class="p">);}</span>
  <span class="nt">40</span><span class="o">%</span><span class="p">{</span> <span class="nl">transform</span><span class="p">:</span> <span class="n">scale</span><span class="p">(</span><span class="m">0.5</span><span class="p">);}</span>
  <span class="nt">60</span><span class="o">%</span><span class="p">{</span> <span class="nl">transform</span><span class="p">:</span> <span class="n">scale</span><span class="p">(</span><span class="m">0</span><span class="p">);}</span>
  <span class="nt">80</span><span class="o">%</span><span class="p">{</span> <span class="nl">transform</span><span class="p">:</span> <span class="n">scale</span><span class="p">(</span><span class="m">-1</span><span class="p">);}</span>
  <span class="nt">100</span><span class="o">%</span><span class="p">{</span> <span class="nl">transform</span><span class="p">:</span> <span class="n">scale</span><span class="p">(</span><span class="m">1</span><span class="p">);}</span>
<span class="p">}</span>
<span class="nt">p</span><span class="p">{</span> <span class="nl">animation</span><span class="p">:</span> <span class="n">scaling</span> <span class="m">10s</span> <span class="n">steps</span><span class="p">(</span><span class="m">1</span><span class="p">)</span> <span class="m">0s</span> <span class="n">infinite</span><span class="p">;}</span></code></pre></figure>

<div class="result" id="scale-animation">
  <p><strong>scale(1)</strong>: normal size</p>
  <p><strong>scale(2)</strong>: double size</p>
  <p><strong>scale(0.5)</strong>: half size</p>
  <p><strong>scale(0)</strong>: zero size (invisible)</p>
  <p><strong>scale(-1)</strong>: mirrored</p>
  <div>Scaling</div>
</div>

<style type="text/css">
#scale-animation{ padding: 2rem;}
#scale-animation p{ animation: scaling-toggle 10s steps(1) 0s infinite forwards; background: white; color: grey; left: 2rem; margin: 0; opacity: 0; padding: 0 0.5em; position: absolute; top: 2rem; z-index: 1;}
#scale-animation p:first-child{ left: 0; position: relative; top: 0;}
#scale-animation p:nth-child(2){ animation-delay: 2s;}
#scale-animation p:nth-child(3){ animation-delay: 4s;}
#scale-animation p:nth-child(4){ animation-delay: 6s;}
#scale-animation p:nth-child(5){ animation-delay: 8s;}
#scale-animation p strong{ content: ""; display: inline-block;}
#scale-animation div{ animation: scaling 10s linear 0s infinite; background: goldenrod; border-radius: 60px; color: white; height: 120px; line-height: 120px; margin-top: 2rem;; text-align: center; transition: all 100ms linear; width: 120px;}

@keyframes scaling {
  0%  { transform: scale(1);}
  19% { transform: scale(1);}
  20% { transform: scale(2);}
  39% { transform: scale(2);}
  40% { transform: scale(0.5);}
  59% { transform: scale(0.5);}
  60% { transform: scale(0);}
  79% { transform: scale(0);}
  80% { transform: scale(-1);}
  99% { transform: scale(-1);}
  100%{ transform: scale(1);}
}

@keyframes scaling-toggle {
  0%  { opacity: 1;}
  20% { opacity: 0;}
  100%{ opacity: 0;}
}
</style>

<p>Like <code class="highlighter-rouge">translate()</code>, the <code class="highlighter-rouge">scale()</code> function has x and y versions: <code class="highlighter-rouge">scaleX()</code> and <code class="highlighter-rouge">scaleY()</code> to resize horizontally and vertically respectively.</p>

<h3 id="skew">skew</h3>

<p>The <code class="highlighter-rouge">skew()</code> function allows to <strong>distort an element</strong>, by dragging its sides along a line basically.</p>

<p>This transform function is rarely used, as its effects are quite unpredictable, and its results not necessarily appealing. Nevertheless, let’s see how it works.</p>

<p>Like <code class="highlighter-rouge">scale()</code>, the <code class="highlighter-rouge">skew()</code> functions accepts either:</p>

<ul>
  <li><strong>1 parameter</strong>: the element is distorted horizontally</li>
  <li><strong>2 parameters</strong>: the first value distorts the element <em>horizontally</em>, the second one <em>vertically</em></li>
</ul>

<p>And like <code class="highlighter-rouge">rotate()</code>, <code class="highlighter-rouge">skew()</code> only accepts <strong>angle</strong> values like degrees <code class="highlighter-rouge">deg</code>.</p>

<figure class="highlight"><pre><code class="language-css" data-lang="css"><span class="k">@keyframes</span> <span class="n">skewing</span> <span class="p">{</span>
  <span class="nt">0</span><span class="o">%</span>  <span class="p">{</span> <span class="nl">transform</span><span class="p">:</span> <span class="n">skew</span><span class="p">(</span><span class="m">0deg</span><span class="p">);}</span>
  <span class="nt">20</span><span class="o">%</span> <span class="p">{</span> <span class="nl">transform</span><span class="p">:</span> <span class="n">skew</span><span class="p">(</span><span class="m">10deg</span><span class="p">);}</span>
  <span class="nt">40</span><span class="o">%</span> <span class="p">{</span> <span class="nl">transform</span><span class="p">:</span> <span class="n">skew</span><span class="p">(</span><span class="m">45deg</span><span class="p">);}</span>
  <span class="nt">60</span><span class="o">%</span> <span class="p">{</span> <span class="nl">transform</span><span class="p">:</span> <span class="n">skew</span><span class="p">(</span><span class="m">90deg</span><span class="p">);}</span>
  <span class="nt">80</span><span class="o">%</span> <span class="p">{</span> <span class="nl">transform</span><span class="p">:</span> <span class="n">skew</span><span class="p">(</span><span class="m">120deg</span><span class="p">);}</span>
  <span class="nt">100</span><span class="o">%</span><span class="p">{</span> <span class="nl">transform</span><span class="p">:</span> <span class="n">skew</span><span class="p">(</span><span class="m">0deg</span><span class="p">);}</span>
<span class="p">}</span>
<span class="nt">p</span><span class="p">{</span> <span class="nl">animation</span><span class="p">:</span> <span class="n">skewing</span> <span class="m">10s</span> <span class="n">steps</span><span class="p">(</span><span class="m">1</span><span class="p">)</span> <span class="m">0s</span> <span class="n">infinite</span><span class="p">;}</span></code></pre></figure>

<div class="result" id="skew-animation">
  <p><strong>skew(0deg)</strong>: no distortion</p>
  <p><strong>skew(10deg)</strong>: subtle horizontal distortion</p>
  <p><strong>skew(45deg)</strong>: quarter distortion</p>
  <p><strong>skew(90deg)</strong>: half distortion (invisible)</p>
  <p><strong>skew(120deg)</strong>: same as -60deg</p>
  <div>Skewing</div>
</div>

<style type="text/css">
#skew-animation{ padding: 2rem;}
#skew-animation p{ animation: scaling-toggle 10s steps(1) 0s infinite forwards; background: white; color: grey; left: 2rem; margin: 0; opacity: 0; padding: 0 0.5em; position: absolute; top: 2rem; z-index: 1;}
#skew-animation p:first-child{ left: 0; position: relative; top: 0;}
#skew-animation p:nth-child(2){ animation-delay: 2s;}
#skew-animation p:nth-child(3){ animation-delay: 4s;}
#skew-animation p:nth-child(4){ animation-delay: 6s;}
#skew-animation p:nth-child(5){ animation-delay: 8s;}
#skew-animation div{ animation: skewing 10s linear infinite; background: tomato; color: white; height: 60px; line-height: 60px; margin-top: 2rem;; text-align: center; transition: all 100ms linear; width: 120px;}

@keyframes skewing {
  0%  { transform: skew(0deg);}
  19% { transform: skew(0deg);}
  20% { transform: skew(10deg);}
  39% { transform: skew(10deg);}
  40% { transform: skew(45deg);}
  59% { transform: skew(45deg);}
  60% { transform: skew(90deg);}
  79% { transform: skew(90deg);}
  80% { transform: skew(120deg);}
  99% { transform: skew(120deg);}
  100%{ transform: skew(180deg);}
}

@keyframes skewing-toggle {
  0%  { opacity: 1;}
  20% { opacity: 0;}
  100%{ opacity: 0;}
}
</style>

<h3 id="3d-functions">3d functions</h3>

<p>We’ve seen how transform functions operate on a <strong>plane</strong>, along the x and y axis.</p>

<p>For example:</p>

<ul>
  <li><code class="highlighter-rouge">translate()</code> with up to 2 parameters:
    <ul>
      <li><code class="highlighter-rouge">translate(x)</code></li>
      <li><code class="highlighter-rouge">translate(x,y)</code></li>
    </ul>
  </li>
  <li><code class="highlighter-rouge">translateX()</code> as x only</li>
  <li><code class="highlighter-rouge">translateY()</code> as y only</li>
</ul>

<p>But all these functions also have a <strong>3d version</strong>.</p>

<p>For example, <code class="highlighter-rouge">translate()</code> has a <code class="highlighter-rouge">translate3d()</code> version that performs transformation along <strong>3 dimensions</strong>, which means it includes the <strong>z axis</strong> as well (and as such, a standalone <code class="highlighter-rouge">translateZ()</code> function exists as well).</p>

<p>The <strong>z</strong> parameter basically make the element move closer and further, whether we increase or decrease its value. It’s like zooming in and out.</p>

<figure class="highlight"><pre><code class="language-css" data-lang="css"><span class="k">@keyframes</span> <span class="n">zooming</span> <span class="p">{</span>
  <span class="nt">0</span><span class="o">%</span>  <span class="p">{</span> <span class="nl">transform</span><span class="p">:</span> <span class="n">translate3d</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">);}</span>
  <span class="nt">100</span><span class="o">%</span><span class="p">{</span> <span class="nl">transform</span><span class="p">:</span> <span class="n">translate3d</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">200px</span><span class="p">);}</span>
<span class="p">}</span>
<span class="nt">p</span><span class="p">{</span> <span class="nl">animation</span><span class="p">:</span> <span class="n">zooming</span> <span class="m">5s</span> <span class="n">alternate</span><span class="p">;}</span></code></pre></figure>

<div class="result" id="zoom-animation">
  <div>Original</div>
  <p>Transformed</p>
</div>

<style type="text/css">
#zoom-animation{ padding: 2rem; perspective: 500;}
#zoom-animation div,
#zoom-animation p{ background: midnightblue; color: white; height: 200px; line-height: 200px; margin: 0; position: relative; text-align: center; width: 200px;}
#zoom-animation p{ animation: zooming 5s alternate infinite both; background: limegreen; left: 2rem; opacity: 0.7; position: absolute; top: 2rem;}

@keyframes zooming {
  0%  { transform: translate3d(0, 0, 0);}
  100%{ transform: translate3d(0, 0, 200px);}
}
</style>

<p>The green block rise <code class="highlighter-rouge">200px</code> <em>“upwards”</em>, as if coming closer to us, along the z axis.</p>

<p class="info"><code class="highlighter-rouge">perspective: 500;</code> needs to be applied to the parent element in order for the 3d space to become active. Alternatively, <code class="highlighter-rouge">transform: perspective(500px);</code> can be used as well.</p>
:ET